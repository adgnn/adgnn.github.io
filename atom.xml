<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>adgnn&#39;s Blog</title>
  
  <subtitle>闲来无事</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://adgnn.github.io/"/>
  <updated>2019-05-03T04:51:35.367Z</updated>
  <id>https://adgnn.github.io/</id>
  
  <author>
    <name>adgnn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机组成原理-存储器设计实验</title>
    <link href="https://adgnn.github.io/2019/05/03/2019-5-3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E5%AD%98%E5%82%A8%E5%99%A8%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C/"/>
    <id>https://adgnn.github.io/2019/05/03/2019-5-3-计算机组成原理-存储器设计实验/</id>
    <published>2019-05-03T09:49:01.998Z</published>
    <updated>2019-05-03T04:51:35.367Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h4><p>掌握灵活运用Verilog HDL语言进行各种描述与建模的技巧和方法；学习在Vivado中使用Memory IP核生成存储器的方法；学习存储器的结构及读写原理，掌握存储器的设计方法。</p><h4 id="实验要求："><a href="#实验要求：" class="headerlink" title="实验要求："></a>实验要求：</h4><p>实验vivado内置的IP核生成一个存储器，并写一个顶层模块验证。</p><h4 id="验证模块："><a href="#验证模块：" class="headerlink" title="验证模块："></a>验证模块：</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ram(out,Write_Addr_swb,sw,Clk_swb,Write_swb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> [<span class="number">32</span>:<span class="number">1</span>]sw;</span><br><span class="line"><span class="keyword">input</span> Write_Addr_swb; <span class="comment">//写地址按钮</span></span><br><span class="line"><span class="keyword">input</span> Clk_swb=<span class="number">0</span>;      <span class="comment">//时钟引脚</span></span><br><span class="line"><span class="keyword">input</span> Write_swb=<span class="number">0</span>;    <span class="comment">//写信号引脚</span></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span>[<span class="number">32</span>:<span class="number">1</span>] out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">6</span>:<span class="number">1</span>] Mem_Addr; <span class="comment">//6个逻辑开关 当按钮1按下，32位开关中6位是读写存储器的地址</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">32</span>:<span class="number">1</span>] W_Data; <span class="comment">//32个逻辑开关 写操作时，当按钮2按下时，32位开关值是写入数据</span></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">32</span>:<span class="number">1</span>] R_Data;</span><br><span class="line"><span class="keyword">reg</span> Mem_Write; <span class="comment">//1个按钮 =1为写操作 =0为读操作</span></span><br><span class="line"><span class="keyword">reg</span> clka; <span class="comment">//时钟</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RAM_B Data_RAM (</span><br><span class="line">  <span class="variable">.clka</span>(clka),    <span class="comment">// input wire clka</span></span><br><span class="line">  <span class="variable">.wea</span>(Mem_Write),      <span class="comment">// input wire [0 : 0] wea</span></span><br><span class="line">  <span class="variable">.addra</span>(Mem_Addr[<span class="number">6</span>:<span class="number">1</span>]),  <span class="comment">// input wire [5 : 0] addra</span></span><br><span class="line">  <span class="variable">.dina</span>(W_Data),    <span class="comment">// input wire [31 : 0] dina</span></span><br><span class="line">  <span class="variable">.douta</span>(R_Data)  <span class="comment">// output wire [31 : 0] douta</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(*)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">    clka&lt;=Clk_swb;         <span class="comment">//时钟</span></span><br><span class="line">    Mem_Write&lt;=Write_swb;  <span class="comment">//写地址信号</span></span><br><span class="line">    <span class="keyword">if</span>(Write_Addr_swb)     <span class="comment">//写地址地址</span></span><br><span class="line">        Mem_Addr&lt;=sw[<span class="number">6</span>:<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(!Mem_Write &amp; clka)  <span class="comment">//读存储器</span></span><br><span class="line">        out&lt;=R_Data;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(Mem_Write &amp; clka)   <span class="comment">//写存储器</span></span><br><span class="line">        W_Data&lt;=sw;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h4 id="仿真文件："><a href="#仿真文件：" class="headerlink" title="仿真文件："></a>仿真文件：</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ram(out,Write_Addr_swb,sw,Clk_swb,Write_swb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> [<span class="number">32</span>:<span class="number">1</span>]sw;</span><br><span class="line"><span class="keyword">input</span> Write_Addr_swb; <span class="comment">//写地址按钮</span></span><br><span class="line"><span class="keyword">input</span> Clk_swb=<span class="number">0</span>;      <span class="comment">//时钟引脚</span></span><br><span class="line"><span class="keyword">input</span> Write_swb=<span class="number">0</span>;    <span class="comment">//写信号引脚</span></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span>[<span class="number">32</span>:<span class="number">1</span>] out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">6</span>:<span class="number">1</span>] Mem_Addr; <span class="comment">//6个逻辑开关 当按钮1按下，32位开关中6位是读写存储器的地址</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">32</span>:<span class="number">1</span>] W_Data; <span class="comment">//32个逻辑开关 写操作时，当按钮2按下时，32位开关值是写入数据</span></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">32</span>:<span class="number">1</span>] R_Data;</span><br><span class="line"><span class="keyword">reg</span> Mem_Write; <span class="comment">//1个按钮 =1为写操作 =0为读操作</span></span><br><span class="line"><span class="keyword">reg</span> clka; <span class="comment">//时钟</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RAM_B Data_RAM (</span><br><span class="line">  <span class="variable">.clka</span>(clka),    <span class="comment">// input wire clka</span></span><br><span class="line">  <span class="variable">.wea</span>(Mem_Write),      <span class="comment">// input wire [0 : 0] wea</span></span><br><span class="line">  <span class="variable">.addra</span>(Mem_Addr[<span class="number">6</span>:<span class="number">1</span>]),  <span class="comment">// input wire [5 : 0] addra</span></span><br><span class="line">  <span class="variable">.dina</span>(W_Data),    <span class="comment">// input wire [31 : 0] dina</span></span><br><span class="line">  <span class="variable">.douta</span>(R_Data)  <span class="comment">// output wire [31 : 0] douta</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(*)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">    clka&lt;=Clk_swb;         <span class="comment">//时钟</span></span><br><span class="line">    Mem_Write&lt;=Write_swb;  <span class="comment">//写地址信号</span></span><br><span class="line">    <span class="keyword">if</span>(Write_Addr_swb)     <span class="comment">//写地址地址</span></span><br><span class="line">        Mem_Addr&lt;=sw[<span class="number">6</span>:<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(!Mem_Write &amp; clka)  <span class="comment">//读存储器</span></span><br><span class="line">        out&lt;=R_Data;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(Mem_Write &amp; clka)   <span class="comment">//写存储器</span></span><br><span class="line">        W_Data&lt;=sw;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/05/03/ENq0Z6.png" alt="写操作"></p><p><img src="https://s2.ax1x.com/2019/05/03/ENqBdK.png" alt="读操作"></p><p><img src="https://s2.ax1x.com/2019/05/03/ENqvwV.png" alt="电路图"></p><h4 id="实验收获："><a href="#实验收获：" class="headerlink" title="实验收获："></a>实验收获：</h4><p>Vivado中IP核的生成和调用方法。更熟练地掌握了仿真调试的方法。在仿真中，使用for语句对16个存储器地址写入，然后读出，很好地验证了预期结果</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;实验目的：&quot;&gt;&lt;a href=&quot;#实验目的：&quot; class=&quot;headerlink&quot; title=&quot;实验目的：&quot;&gt;&lt;/a&gt;实验目的：&lt;/h4&gt;&lt;p&gt;掌握灵活运用Verilog HDL语言进行各种描述与建模的技巧和方法；学习在Vivado中使用Memory IP核生
      
    
    </summary>
    
    
      <category term="计算机组成原理" scheme="https://adgnn.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
      <category term="verilog" scheme="https://adgnn.github.io/tags/verilog/"/>
    
      <category term="vivado" scheme="https://adgnn.github.io/tags/vivado/"/>
    
      <category term="FPGA" scheme="https://adgnn.github.io/tags/FPGA/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理-寄存器堆设计实验</title>
    <link href="https://adgnn.github.io/2019/05/03/2019-5-3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E5%AF%84%E5%AD%98%E5%99%A8%E5%A0%86%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C/"/>
    <id>https://adgnn.github.io/2019/05/03/2019-5-3-计算机组成原理-寄存器堆设计实验/</id>
    <published>2019-05-03T09:49:01.996Z</published>
    <updated>2019-05-03T04:43:26.383Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h4><ul><li><p>学习使用Verilog HDL语言进行时序电路的设计方法</p></li><li><p>掌握灵活运用Verilog HDL语言进行各种描述与建模的技巧和方法</p></li><li><p>学习寄存器堆的数据传送与读写工作原理，掌握寄存器堆的设计方法。</p></li></ul><h4 id="实验要求："><a href="#实验要求：" class="headerlink" title="实验要求："></a>实验要求：</h4><ul><li><p>设计一个32*32位的寄存器堆（即含有32个寄存器，每个寄存器32位）</p></li><li><p>读访问操作：无需时钟同步，只要给出寄存器地址，即可读出寄存器中的数据。</p></li><li><p>写访问操作：需要时钟同步，所有写入操作的输入信号必须在时钟边沿来临时，已经有效（Write_Reg=1、地址和数据）。</p></li></ul><h4 id="寄存器模块："><a href="#寄存器模块：" class="headerlink" title="寄存器模块："></a>寄存器模块：</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> RegFile(Clk,Clr,Write_Reg,R_Addr_A,</span><br><span class="line">                R_Addr_B,W_Addr,W_Data,R_Data_A,R_Data_B);</span><br><span class="line">    <span class="keyword">input</span> Clk;  <span class="comment">//时钟信号</span></span><br><span class="line">    <span class="keyword">input</span> Clr;  <span class="comment">//清零信号</span></span><br><span class="line">    <span class="keyword">input</span> Write_Reg; <span class="comment">//写控制信号</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">5</span>:<span class="number">1</span>]R_Addr_A; <span class="comment">//A端口读寄存器地址</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">5</span>:<span class="number">1</span>]R_Addr_B; <span class="comment">//B端口读寄存器地址</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">5</span>:<span class="number">1</span>]W_Addr;   <span class="comment">//写寄存器地址</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">32</span>:<span class="number">1</span>]W_Data;  <span class="comment">//写入数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">output</span> [<span class="number">32</span>:<span class="number">1</span>]R_Data_A; <span class="comment">//A端口读出数据</span></span><br><span class="line">    <span class="keyword">output</span> [<span class="number">32</span>:<span class="number">1</span>]R_Data_B; <span class="comment">//B端口读出数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">32</span>:<span class="number">1</span>]Reg_Files[<span class="number">31</span>:<span class="number">0</span>]; <span class="comment">//寄存器堆</span></span><br><span class="line">    <span class="keyword">integer</span> i; <span class="comment">//遍历</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">initial</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">32</span>;i=i+<span class="number">1</span>) Reg_Files[i]&lt;=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">posedge</span> Clk <span class="keyword">or</span> <span class="keyword">posedge</span> Clr)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(Clr)<span class="comment">//检测清零</span></span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">32</span>;i=i+<span class="number">1</span>) Reg_Files[i]&lt;=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//检测写控制，高电平则写入寄存器</span></span><br><span class="line">            <span class="keyword">if</span>(Write_Reg) Reg_Files[W_Addr]&lt;=W_Data;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> R_Data_A=Reg_Files[R_Addr_A];</span><br><span class="line">    <span class="keyword">assign</span> R_Data_B=Reg_Files[R_Addr_B];</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h4 id="顶层验证模块："><a href="#顶层验证模块：" class="headerlink" title="顶层验证模块："></a>顶层验证模块：</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> registers(sw,button,out);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">32</span>:<span class="number">1</span>] sw;</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">6</span>:<span class="number">1</span>] button;</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span>[<span class="number">32</span>:<span class="number">1</span>] out=<span class="number">32'hzzzz_zzzz</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">reg</span> Clk=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">reg</span> Clr=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">reg</span> Write_Reg=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">1</span>] R_Addr_A=<span class="number">5'bz</span>;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">1</span>] R_Addr_B=<span class="number">5'bz</span>;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">1</span>] W_Addr=<span class="number">5'bz</span>;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">32</span>:<span class="number">1</span>] W_Data=<span class="number">32'bz</span>;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">32</span>:<span class="number">1</span>] Reg_Files[<span class="number">31</span>:<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">32</span>:<span class="number">1</span>] R_Data_A;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">32</span>:<span class="number">1</span>] R_Data_B;</span><br><span class="line">    </span><br><span class="line">    RegFile RF(</span><br><span class="line">        <span class="variable">.Clk</span>(Clk),</span><br><span class="line">        <span class="variable">.Clr</span>(Clr),</span><br><span class="line">        <span class="variable">.Write_Reg</span>(Write_Reg),</span><br><span class="line">        <span class="variable">.R_Addr_A</span>(sw[<span class="number">32</span>:<span class="number">28</span>]),</span><br><span class="line">        <span class="variable">.R_Addr_B</span>(sw[<span class="number">27</span>:<span class="number">23</span>]),</span><br><span class="line">        <span class="variable">.W_Addr</span>(W_Addr),</span><br><span class="line">        <span class="variable">.W_Data</span>(W_Data),</span><br><span class="line">        <span class="variable">.R_Data_A</span>(R_Data_A),</span><br><span class="line">        <span class="variable">.R_Data_B</span>(R_Data_B));</span><br><span class="line">        </span><br><span class="line">     <span class="keyword">always</span> @(*)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(button)</span><br><span class="line">            <span class="number">6'b100000</span>: <span class="keyword">begin</span> W_Addr&lt;=sw[<span class="number">5</span>:<span class="number">1</span>]; <span class="keyword">end</span> <span class="comment">//输入低5位为寄存器地址</span></span><br><span class="line">            <span class="number">6'b010000</span>: <span class="keyword">begin</span> W_Data&lt;=sw; <span class="keyword">end</span>      <span class="comment">//输入寄存器内容</span></span><br><span class="line">            <span class="number">6'b001000</span>: <span class="keyword">begin</span> Write_Reg&lt;=sw[<span class="number">1</span>]; <span class="keyword">end</span><span class="comment">//提供Write_Reg信号，=1写操作</span></span><br><span class="line">            <span class="number">6'b000100</span>: <span class="keyword">begin</span> Clr&lt;=button[<span class="number">3</span>]; <span class="keyword">end</span>      <span class="comment">//提供Reset</span></span><br><span class="line">            <span class="number">6'b000010</span>: <span class="keyword">begin</span> </span><br><span class="line">                       <span class="keyword">if</span>(sw[<span class="number">1</span>])</span><br><span class="line">                           out&lt;=R_Data_A;</span><br><span class="line">                       <span class="keyword">else</span></span><br><span class="line">                           out&lt;=R_Data_B;</span><br><span class="line">                       <span class="keyword">end</span>  <span class="comment">//读A/B端口选择</span></span><br><span class="line">            <span class="number">6'b000000</span>: <span class="keyword">begin</span> out&lt;=<span class="number">32'bz</span>; Clr&lt;=<span class="number">0</span>; Clk&lt;=<span class="number">0</span>; <span class="keyword">end</span></span><br><span class="line">            <span class="number">6'b000001</span>: <span class="keyword">begin</span> Clk&lt;=button[<span class="number">1</span>]; <span class="keyword">end</span>     <span class="comment">//提供Clk信号</span></span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">begin</span> out&lt;=<span class="number">32'bz</span>; Clr&lt;=<span class="number">0</span>; Clk&lt;=<span class="number">0</span>; <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h4 id="仿真文件："><a href="#仿真文件：" class="headerlink" title="仿真文件："></a>仿真文件：</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> registers(sw,button,out);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">32</span>:<span class="number">1</span>] sw;</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">6</span>:<span class="number">1</span>] button;</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span>[<span class="number">32</span>:<span class="number">1</span>] out=<span class="number">32'hzzzz_zzzz</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">reg</span> Clk=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">reg</span> Clr=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">reg</span> Write_Reg=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">1</span>] R_Addr_A=<span class="number">5'bz</span>;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">1</span>] R_Addr_B=<span class="number">5'bz</span>;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">1</span>] W_Addr=<span class="number">5'bz</span>;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">32</span>:<span class="number">1</span>] W_Data=<span class="number">32'bz</span>;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">32</span>:<span class="number">1</span>] Reg_Files[<span class="number">31</span>:<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">32</span>:<span class="number">1</span>] R_Data_A;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">32</span>:<span class="number">1</span>] R_Data_B;</span><br><span class="line">    </span><br><span class="line">    RegFile RF(</span><br><span class="line">        <span class="variable">.Clk</span>(Clk),</span><br><span class="line">        <span class="variable">.Clr</span>(Clr),</span><br><span class="line">        <span class="variable">.Write_Reg</span>(Write_Reg),</span><br><span class="line">        <span class="variable">.R_Addr_A</span>(sw[<span class="number">32</span>:<span class="number">28</span>]),</span><br><span class="line">        <span class="variable">.R_Addr_B</span>(sw[<span class="number">27</span>:<span class="number">23</span>]),</span><br><span class="line">        <span class="variable">.W_Addr</span>(W_Addr),</span><br><span class="line">        <span class="variable">.W_Data</span>(W_Data),</span><br><span class="line">        <span class="variable">.R_Data_A</span>(R_Data_A),</span><br><span class="line">        <span class="variable">.R_Data_B</span>(R_Data_B));</span><br><span class="line">        </span><br><span class="line">     <span class="keyword">always</span> @(*)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(button)</span><br><span class="line">            <span class="number">6'b100000</span>: <span class="keyword">begin</span> W_Addr&lt;=sw[<span class="number">5</span>:<span class="number">1</span>]; <span class="keyword">end</span> <span class="comment">//输入低5位为寄存器地址</span></span><br><span class="line">            <span class="number">6'b010000</span>: <span class="keyword">begin</span> W_Data&lt;=sw; <span class="keyword">end</span>      <span class="comment">//输入寄存器内容</span></span><br><span class="line">            <span class="number">6'b001000</span>: <span class="keyword">begin</span> Write_Reg&lt;=sw[<span class="number">1</span>]; <span class="keyword">end</span><span class="comment">//提供Write_Reg信号，=1写操作</span></span><br><span class="line">            <span class="number">6'b000100</span>: <span class="keyword">begin</span> Clr&lt;=button[<span class="number">3</span>]; <span class="keyword">end</span>      <span class="comment">//提供Reset</span></span><br><span class="line">            <span class="number">6'b000010</span>: <span class="keyword">begin</span> </span><br><span class="line">                       <span class="keyword">if</span>(sw[<span class="number">1</span>])</span><br><span class="line">                           out&lt;=R_Data_A;</span><br><span class="line">                       <span class="keyword">else</span></span><br><span class="line">                           out&lt;=R_Data_B;</span><br><span class="line">                       <span class="keyword">end</span>  <span class="comment">//读A/B端口选择</span></span><br><span class="line">            <span class="number">6'b000000</span>: <span class="keyword">begin</span> out&lt;=<span class="number">32'bz</span>; Clr&lt;=<span class="number">0</span>; Clk&lt;=<span class="number">0</span>; <span class="keyword">end</span></span><br><span class="line">            <span class="number">6'b000001</span>: <span class="keyword">begin</span> Clk&lt;=button[<span class="number">1</span>]; <span class="keyword">end</span>     <span class="comment">//提供Clk信号</span></span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">begin</span> out&lt;=<span class="number">32'bz</span>; Clr&lt;=<span class="number">0</span>; Clk&lt;=<span class="number">0</span>; <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/05/03/ENbLVK.png" alt="波形图"></p><p><img src="https://s2.ax1x.com/2019/05/03/ENbOUO.png" alt="电路图"></p><h4 id="实验收获："><a href="#实验收获：" class="headerlink" title="实验收获："></a>实验收获：</h4><p>寄存器堆设计和之前的ALU设计有一定的相似之处，如都是顶层+本体的设计方法，顶层控制着外部的输入输出，并将值传递到本体模块进行具体计算。</p><p>具体代码实现过程中，利用always语句块和assign语句来区分时序和非时序逻辑电路（写和读）。仿真过程遇到了点问题，最后一步本意为输出B读端口（ffff_ffff），结果输出为0，但上板后没有问题。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;实验目的：&quot;&gt;&lt;a href=&quot;#实验目的：&quot; class=&quot;headerlink&quot; title=&quot;实验目的：&quot;&gt;&lt;/a&gt;实验目的：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;学习使用Verilog HDL语言进行时序电路的设计方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;掌握灵
      
    
    </summary>
    
    
      <category term="计算机组成原理" scheme="https://adgnn.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
      <category term="verilog" scheme="https://adgnn.github.io/tags/verilog/"/>
    
      <category term="vivado" scheme="https://adgnn.github.io/tags/vivado/"/>
    
      <category term="FPGA" scheme="https://adgnn.github.io/tags/FPGA/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理-多功能ALU设计</title>
    <link href="https://adgnn.github.io/2019/05/03/2019-5-3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E5%A4%9A%E5%8A%9F%E8%83%BDALU%E8%AE%BE%E8%AE%A1/"/>
    <id>https://adgnn.github.io/2019/05/03/2019-5-3-计算机组成原理-多功能ALU设计/</id>
    <published>2019-05-03T09:49:01.994Z</published>
    <updated>2019-05-03T05:12:03.272Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h4><ol><li><p>学习多功能ALU的工作原理，掌握运算器的设计方法。</p></li><li><p>掌握运用Verilog HDL语言进行行为描述与建模的技巧和方法。</p></li></ol><h4 id="实验要求："><a href="#实验要求：" class="headerlink" title="实验要求："></a>实验要求：</h4><ol><li><p>设计一个具有8种运算功能的32位ALU，并能够产生运算结果的标志：结果为零标志ZF，溢出标志OF。</p></li><li><p>编写顶层模块，用于验证模块的正确性。</p></li></ol><h4 id="ALU模块："><a href="#ALU模块：" class="headerlink" title="ALU模块："></a>ALU模块：</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ALU1(A,B,F,ALU_OP,OF,ZF);</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">32</span>:<span class="number">1</span>] A;</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">32</span>:<span class="number">1</span>] B;</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">1</span>] ALU_OP;</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">32</span>:<span class="number">1</span>] F;</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> ZF,OF;</span><br><span class="line">    <span class="keyword">reg</span> C;</span><br><span class="line">    <span class="keyword">always</span> @(*)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(ALU_OP)</span><br><span class="line">            <span class="number">4'b0</span>: <span class="keyword">begin</span> F&lt;=A&amp;B; OF&lt;=<span class="number">0</span>; <span class="keyword">end</span></span><br><span class="line">            <span class="number">4'b1</span>: <span class="keyword">begin</span> F&lt;=A|B; OF&lt;=<span class="number">0</span>; <span class="keyword">end</span></span><br><span class="line">            <span class="number">4'b10</span>:<span class="keyword">begin</span> F&lt;=A^B; OF&lt;=<span class="number">0</span>; <span class="keyword">end</span></span><br><span class="line">            <span class="number">4'b11</span>:<span class="keyword">begin</span> F&lt;=~(A|B); OF&lt;=<span class="number">0</span>; <span class="keyword">end</span></span><br><span class="line">            <span class="number">4'b100</span>:<span class="keyword">begin</span> &#123;C,F&#125;&lt;=A+B; OF&lt;=C; <span class="keyword">end</span></span><br><span class="line">            <span class="number">4'b101</span>:<span class="keyword">begin</span> &#123;C,F&#125;&lt;=A-B; OF&lt;=C; <span class="keyword">end</span></span><br><span class="line">            <span class="number">4'b110</span>:<span class="keyword">begin</span></span><br><span class="line">                       <span class="keyword">if</span>(A&lt;B)</span><br><span class="line">                           F&lt;=<span class="number">1</span>;</span><br><span class="line">                       <span class="keyword">else</span></span><br><span class="line">                           F&lt;=<span class="number">0</span>;</span><br><span class="line">                   <span class="keyword">end</span></span><br><span class="line">            <span class="number">4'b111</span>:<span class="keyword">begin</span> F&lt;=B&lt;&lt;A; OF&lt;=<span class="number">1</span>; <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">default</span>:<span class="keyword">begin</span> F&lt;=<span class="number">32'hzzzz_zzzz</span>; OF&lt;=<span class="number">1'bz</span>; <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">        <span class="keyword">if</span>(F==<span class="number">0</span>)</span><br><span class="line">            ZF&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ZF&lt;=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h4 id="顶层验证模块："><a href="#顶层验证模块：" class="headerlink" title="顶层验证模块："></a>顶层验证模块：</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ALU1(A,B,F,ALU_OP,OF,ZF);</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">32</span>:<span class="number">1</span>] A;</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">32</span>:<span class="number">1</span>] B;</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">1</span>] ALU_OP;</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">32</span>:<span class="number">1</span>] F;</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> ZF,OF;</span><br><span class="line">    <span class="keyword">reg</span> C;</span><br><span class="line">    <span class="keyword">always</span> @(*)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(ALU_OP)</span><br><span class="line">            <span class="number">4'b0</span>: <span class="keyword">begin</span> F&lt;=A&amp;B; OF&lt;=<span class="number">0</span>; <span class="keyword">end</span></span><br><span class="line">            <span class="number">4'b1</span>: <span class="keyword">begin</span> F&lt;=A|B; OF&lt;=<span class="number">0</span>; <span class="keyword">end</span></span><br><span class="line">            <span class="number">4'b10</span>:<span class="keyword">begin</span> F&lt;=A^B; OF&lt;=<span class="number">0</span>; <span class="keyword">end</span></span><br><span class="line">            <span class="number">4'b11</span>:<span class="keyword">begin</span> F&lt;=~(A|B); OF&lt;=<span class="number">0</span>; <span class="keyword">end</span></span><br><span class="line">            <span class="number">4'b100</span>:<span class="keyword">begin</span> &#123;C,F&#125;&lt;=A+B; OF&lt;=C; <span class="keyword">end</span></span><br><span class="line">            <span class="number">4'b101</span>:<span class="keyword">begin</span> &#123;C,F&#125;&lt;=A-B; OF&lt;=C; <span class="keyword">end</span></span><br><span class="line">            <span class="number">4'b110</span>:<span class="keyword">begin</span></span><br><span class="line">                       <span class="keyword">if</span>(A&lt;B)</span><br><span class="line">                           F&lt;=<span class="number">1</span>;</span><br><span class="line">                       <span class="keyword">else</span></span><br><span class="line">                           F&lt;=<span class="number">0</span>;</span><br><span class="line">                   <span class="keyword">end</span></span><br><span class="line">            <span class="number">4'b111</span>:<span class="keyword">begin</span> F&lt;=B&lt;&lt;A; OF&lt;=<span class="number">1</span>; <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">default</span>:<span class="keyword">begin</span> F&lt;=<span class="number">32'hzzzz_zzzz</span>; OF&lt;=<span class="number">1'bz</span>; <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">        <span class="keyword">if</span>(F==<span class="number">0</span>)</span><br><span class="line">            ZF&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ZF&lt;=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h4 id="仿真文件："><a href="#仿真文件：" class="headerlink" title="仿真文件："></a>仿真文件：</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="keyword">module</span> test;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">32</span>:<span class="number">1</span>] sw;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">6</span>:<span class="number">1</span>] button;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">32</span>:<span class="number">1</span>] out;</span><br><span class="line">    </span><br><span class="line">    alu uut(</span><br><span class="line">        <span class="variable">.sw</span>(sw),</span><br><span class="line">        <span class="variable">.button</span>(button),</span><br><span class="line">        <span class="variable">.out</span>(out)</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">initial</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">        sw = <span class="number">0</span>;</span><br><span class="line">        button = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        #<span class="number">100</span>;</span><br><span class="line">        <span class="comment">//input A</span></span><br><span class="line">        sw = <span class="number">32'h1234_5678</span>;</span><br><span class="line">        button = <span class="number">6'b100000</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        <span class="comment">//input B</span></span><br><span class="line">        sw = <span class="number">32'h1111_2222</span>;</span><br><span class="line">        button = <span class="number">6'b010000</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        <span class="comment">//and</span></span><br><span class="line">        sw[<span class="number">4</span>:<span class="number">1</span>] = <span class="number">4'h0</span>;</span><br><span class="line">        button = <span class="number">6'b001000</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        button = <span class="number">6'b0</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//or</span></span><br><span class="line">        sw[<span class="number">4</span>:<span class="number">1</span>] = <span class="number">4'h1</span>;</span><br><span class="line">        button = <span class="number">6'b001000</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        button = <span class="number">6'b0</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//xor</span></span><br><span class="line">        sw[<span class="number">4</span>:<span class="number">1</span>] = <span class="number">4'h2</span>;</span><br><span class="line">        button = <span class="number">6'b001000</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        button = <span class="number">6'b0</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//nor</span></span><br><span class="line">        sw[<span class="number">4</span>:<span class="number">1</span>] = <span class="number">4'h3</span>;</span><br><span class="line">        button = <span class="number">6'b001000</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        button = <span class="number">6'b0</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//add</span></span><br><span class="line">        sw[<span class="number">4</span>:<span class="number">1</span>] = <span class="number">4'h4</span>;</span><br><span class="line">        button = <span class="number">6'b001000</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        button = <span class="number">6'b0</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//sub</span></span><br><span class="line">        sw[<span class="number">4</span>:<span class="number">1</span>] = <span class="number">4'h5</span>;</span><br><span class="line">        button=<span class="number">6'b001000</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        button = <span class="number">6'b0</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//slt</span></span><br><span class="line">        sw[<span class="number">4</span>:<span class="number">1</span>] = <span class="number">4'h6</span>;</span><br><span class="line">        button = <span class="number">6'b001000</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        button = <span class="number">6'b0</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//sll</span></span><br><span class="line">        sw[<span class="number">4</span>:<span class="number">1</span>] = <span class="number">4'h7</span>;</span><br><span class="line">        button = <span class="number">6'b001000</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        button = <span class="number">6'b0</span>;</span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/05/03/ENbnHK.png" alt="仿真波形图"></p><p><img src="https://s2.ax1x.com/2019/05/03/ENb19H.png" alt="电路图"></p><h4 id="实验收获："><a href="#实验收获：" class="headerlink" title="实验收获："></a>实验收获：</h4><p>实验过程中，我发现自己对Verilog HDL语言的熟悉程度不够。特别是对阻塞赋值与非阻塞赋值的思想没有理解透彻，导致程序在调试过程中不断出现BUG，难以表达应有的逻辑思想。编程没有充分体现电路本身的特征，仍然是用C语言等高级程序设计语言的思想来编程。</p><p>总体来说，本实验较为基础，不困难。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;实验目的：&quot;&gt;&lt;a href=&quot;#实验目的：&quot; class=&quot;headerlink&quot; title=&quot;实验目的：&quot;&gt;&lt;/a&gt;实验目的：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;学习多功能ALU的工作原理，掌握运算器的设计方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;掌握运用Ve
      
    
    </summary>
    
    
      <category term="计算机组成原理" scheme="https://adgnn.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
      <category term="verilog" scheme="https://adgnn.github.io/tags/verilog/"/>
    
      <category term="vivado" scheme="https://adgnn.github.io/tags/vivado/"/>
    
      <category term="FPGA" scheme="https://adgnn.github.io/tags/FPGA/"/>
    
  </entry>
  
</feed>
